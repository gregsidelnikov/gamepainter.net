#jQuery tutorial tweet 101 ~ To find all HTML elements set the context to document.body so elements like head and script are left out.
#jQuery tutorial tweet 100 ~ You can add your own jQuery methods to the main jQuery object using: $.extend( { method: function(a,b){..} } );
#jQuery tutorial tweet 99 ~ $("div").get(1) is the same as $("div")[1]; ~ both return the raw JavaScript DOM object at index 1 in selection.
#jQuery tutorial tweet 98 ~ Use .get() to access the array of matched elements (As JavaScript DOM objects) ~ $("div").get().reverse();
#jQuery tutorial tweet 98 ~ Reduce the selection to start from the second selected element (starts from 0): $("p").eq(1).css("color", "red")
#jQuery tutorial tweet 97 ~ To find out the number of selected elements, use the length property ~ var n = $("div").length;
#jQuery tutorial tweet 96 ~ Use .each() to run a function on each selected element $("div").each(function(){ this.style.color = "blue"; });
You are not JavaScript. Because everything in JavaScript is an object.
#jQuery tutorial tweet 95 ~ You can pass the raw JavaScript element to jQuery ~ $(document.body).css( "background", "black" );
#jQuery tutorial tweet 94 ~ It is possible to pass plain HTML written by hand to jQuery ~ $("&lt;div>&lt;p>Hello&lt;/p>&lt;/div>").appendTo("body");
#jQuery tutorial tweet 93 ~ $("input:radio", document.forms[0]); ~ finds all inputs of type radio within the first form in the document.
#jQuery tutorial tweet 92 ~ $("#clock")[0] is exactly the same as document.getElementById("clock");
A #poetry newsletter I'm subscribed to ~ http://tinyurl.com/7lpm8c2  ~ Road trips for the mind. #poetry #reading
Free jQuery Tutorials ~ http://www.authenticsociety.com/blog/jQueryPluginTutorial_Beginner - #email
Download jQuery PDF book ~ http://www.learnjquery.org  #jquery
New book cover http://www.learnjquery.org  -- second revision available for download now. PDF #jquery
#jQuery tutorial tweet 91 ~ The [] index will "dereference" a jQuery selector into a raw DOM object: $("#id")[0].style.color='#000000';
#jQuery tutorial tweet 90 ~ The [0] index gets us the raw DOM object from a jQuery selector ~ $($("#p2")[0]).prependTo($("#p1")[0]); works
#jQuery tutorial tweet 89 ~ To say that variables are objects is a mistake. Objects are assigned to variables. Variable is just a handle.
#jQuery tutorial tweet 88 ~ A variable is an interface to the language but isn't an object or an integer itself. That would be the data.
#jQuery tutorial tweet 87 ~ A variable is like a pair of tweezers to pick functions, objects, integers, strings, arrays, etc. to work on.
#jQuery tutorial tweet 86 ~ Oddly, trying to prepend an element to itself will just remove it from the DOM -- $("#p2").prepend("#p2");
List of all jQuery tutorials ~ http://tinyurl.com/6m7wbb8  #jquery
#jQuery tutorial tweet 85 ~ It's possible to pass the jQuery selector itself as arguments to a method ~ $($("#p1")).prepend($("#p2"));
#jQuery tutorial tweet 84 ~ You can pass raw DOM as arguments: $(document.getElementById("p1")).prepend(document.getElementById("p2"));
#jQuery tutorial tweet 83 ~ jQuery UI online demos and documentation -- http://www.jqueryui.com/demos/ 
#jQuery tutorial tweet 82 ~ With jquery.ui.js you can turn a UL/LI list into an interactive drag & drop sortable list by calling .sortable()
#jQuery tutorial tweet 81 ~ jquery.ui.js is an add-on library to jquery.js -- required for animation easing, complex mouse events, etc.
#jQuery tutorial tweet 80 ~ Make any HTML element draggable with jQuery UI -- $("#draggable").draggable(); -- &lt;div id = "draggable">&lt;/div>
#jQuery tutorial tweet 79 ~ $("form").serialize() will return a string of all elements inside the form -- name=value&name2=value2 -- etc.
#jQuery tutorial tweet 78 ~ $("div,p"); is the same as $("div").add("p");
#jQuery tutorial tweet 77 ~ The $(arg1, arg2); function is not limited to string selectors. It can also take a js object or jQuery object.
#jQuery tutorial tweet 76 ~ It's possible to pass a selector to the add function -- $("div").add( $("p") ); -- selects all p + all div.
HTML has a head and a body but no feet. #jquery
#jQuery tutorial tweet 75 ~ Use $("div").add(html) to add HTML to all matched elements. Alternatively you can use ~ $("div").html(html);
The advice: "Think twice" is probably the reason behind all of the failures of humankind. I mean, that's it?
Make no tombstones for your dream graveyard.
#jQuery tutorial tweet 74 ~ JavaScript is the only language people start using without actually learning it.
Expert knowledge is very concise and it is never useful to a beginner who is looking for in-depth answers to simple questions.
#jQuery tutorial tweet 73 ~ The.toJSON() method exists natively on the Date, Number, String, and Boolean objects.
#jQuery tutorial tweet 72 ~ Use JSON.parse(json_string) instead of eval(json_string) to obtain the JSON object.
#jQuery tutorial tweet 71 ~ eval() is very fast. However, it can compile and execute any JavaScript program so there can be security risks.
#jQuery tutorial tweet 70 ~ JSON.stringify( json_obj ) -- to convert an actual object back into a string, perhaps for sending over network.
Regular Expressions (A free PDF excerpt from "Understanding jQuery") http://www.learnjquery.org/preview/regex.pdf #jquery
#jQuery tutorial tweet 69 ~ JSON.parse(string) will parse a JSON in string format and return an object that was created from it.
#jQuery tutorial tweet 68 ~ JSON.parse appears to take strict JSON only. '{"a": "1"}' will work but not '{a: "1"}' (without the quotes.)
#jQuery tutorial tweet 67 ~ JSON is an actual object in JavaScript. -- alert(JSON.stringify( {a:1} )); this will resolve to value of "{a:1}"
#jQuery tutorial tweet 66 ~ var x = { "type": "palm tree" }.type -- this statement will result in x = "palm tree."
#jQuery tutorial tweet 65 ~ alert($("p").css("display")); returns "block" as default.
#jQuery tut. 64 ~ A string literal is not an object. It's internally cast to an object when a method of String.prototype is called on it.
#jQuery tutorial tweet 63 ~ The prototype property should be studied after one becomes familiar with what objects are.
#jQuery tutorial tweet 62 ~ When you change the value of a prototype property it also changes across all existing objects derived from it.
#jQuery tutorial tweet 61 ~ Notice that the prototype property refers to the original and global object composition. Not just new object.
#jQuery tutorial tweet 60 ~ Using prototype to add properties: function() f { }; var obj = new f(); obj.prototype.ha = 1; alert(obj.ha);
#jQuery tutorial tweet 59 ~ eval(statement) is used to evaluate a JavaScript statement. It can even convert a string into function object.
#jQuery tutorial tweet 58 ~ Thinking about "prototype": var f = function(){ }; alert(f.prototype.constructor == f); // will return "true"
#jQuery tutorial tweet 57 ~ The prototype is an object property that allows you to add properties and methods to an object.
I would choose passion over precision any day. Because pursuit of passion will ensure that I make more mistakes than if I choose precision.
#jQuery tutorial tweet 55 ~ By design, everything in JavaScript is an object. But only objects of type "function" have a prototype.
#jQuery tutorial tweet 54 ~ Everyone is confused about what "prototype" is in JavaScript. The following tweets will try to shed light.
#jQuery tutorial tweet 53 ~ "hello".length is an object property(aka variable) and "hello".substr(1,2) is an object method(aka function).
#jQuery tutorial tweet 52 ~ Interestingly, even an in-line literal string statement "hello" is an object. That's why "hello".length works.
#jQuery tutorial tweet 51 ~ Everything created with "var" in JavaScript is an object.
#jQuery tutorial tweet 50 ~ There are a lot of things wrong with #jquery. Nobody talks about it because they think they're the wrong ones.
#jQuery tutorial tweet 49 ~ $("p").animate( { borderWidth: "200px" } ); will work without jquery-ui.js (However "borderColor" will not.)
#jQuery tutorial tweet 48 ~ $("p").animate( { borderColor: "red" } ); will not work unless jquery-ui.js is included in addition to jquery.js
#jQuery tutorial tweet 47 ~ Animate font size in all paragraphs to 100px over 5 seconds ~ $("p").animate({ fontSize: "100px" }, 5000);
#jQuery tutorial tweet 46 ~ Add border and animate it to red: $("p").css( "border", "10px solid blue" ).animate( { borderColor: "red" } );
#jQuery tutorial tweet 45 ~ $("p").css( { opacity: 0.25 } ); and $("p").css( "opacity", "0.25" ); are one and the same thing.
#jQuery tutorial tweet 44 ~ $("div").animate({opacity: 0.25, }); to dynamically fade an element to an opacity of 25% (cross-browser.)
#jQuery tutorial tweet 43 ~ $("div").animate({left: "+=100px" }); will slide the selected div right by 100px counting from current location.
#jQuery tutorial tweet 42 ~ In .animate(css); The first argument "css" is usually a JSON notation. Ex: {left: "100px", top: "10px" }
#jQuery tutorial tweet 41 ~ use .animate(arg); to dynamically change the CSS style of an element to a new state specified as first argument.
http://www.authenticsociety.com  is a social network website I have been working on #jquery #php #mysql
#jQuery tutorial tweet 40 ~ $(document).ready(handler) is the same as $(document).bind("ready", handler);
#jQuery tutorial tweet 39 ~ Attaching .ready() to the document object (top DOM object) means to run code when entire DOM finishes loading.
#jQuery tutorial tweet 38 ~ .ready() is a function that executes when a DOM element is finished loading, or "is ready" to work with.
#jQuery tutorial tweet 37 ~ Access JSON (see previous tweet) ~ $.data($("div")[0], "test").apples; or $.data($("div")[0], "test").oranges;
#jQuery tutorial tweet 36 ~ Assign JSON to arbitrary DOM element ~ jQuery.data($("div")[0], "test", { apples: 16, oranges: "string" });
#jQuery tutorial tweet 35 ~ Create "global" variables attached to a specific DOM element using ~ $.data(document.body, 'apples', 7);
#jQuery tutorial tweet 34 ~ Use $("div#id").toggleClass("classname"); to add/remove the specified class to/from an element.
#jQuery tutorial tweet 33 ~ Dynamically fade an element to an opacity .fadeTo(duration, opacity); where opacity is between 0.0 ~ 1.0.
#jQuery tutorial tweet 32 ~ To globally turn all animations off and set all running animations to final state: jQuery.fx.off = true;
#jQuery tutorial tweet 31 ~ To set vertical scroll bar to 100px down you can use: $("body").scrollTop(100);
#jQuery tutorial tweet 30 ~ You can easily get the vertical scroll bar position as an integer (without 'px') by doing $("body").scrollTop();
#jQuery tutorial tweet 29 ~ Example of using .offset(): var pos = $("div").offset(); var x = pos.left; var y = pos.top;
#jQuery tutorial tweet 28 ~ .offset() method retrieves position of an element relative to the document and .position() relative to parent.
#jQuery tutorial tweet 27 ~ to get x/y offset of an element relative to the x=0, y=0 of the whole document itself, use $("div#id").offset();
#jQuery tutorial tweet 26 ~ To access DOM directly you can dereference the returned jQuery object using [0] alert($("div")[0].style.height);
#jQuery tutorial tweet 25 ~ Get the value of a selected radio button in a radio button set: $('input:radio[name=clocktype]:checked').val();
#jQuery tutorial tweet 24 ~ Get the current value of a select/option drop-down menu: $('select#menu').val();
#jQuery tutorial tweet 23 ~ A reliable way to check if a "checkbox" or "radio button" is checked: if ($("input#id").is(":checked") == true);
#jQuery tutorial tweet 22 ~ Example: $("div#id").before("&lt;div>").after("&lt;/div>"); is exactly the same as $("div#id").wrap("&lt;div />");
#jQuery tutorial tweet 21 ~ var h = $("p").outerHeight() includes padding+border. var h = $("p").innerHeight() includes padding only.
#jQuery tutorial tweet 20 ~ wrap() is not limited to legal HTML: $("p").wrap("&lt;div anything />") will produce &lt;div anything>&lt;p>abc&lt;/p>&lt;/div>
#jQuery tutorial tweet 19 ~ You can get actual height in px of an HTML element with "height:auto" by running $("P").css("height");
#jQuery tutorial tweet 18 ~ The global default animation delay for all jQuery animations can be reset by: jQuery.fx.interval = 100;
#jQuery tutorial tweet 17 ~ It is possible to assign more than one inline class to an element using the space &lt;DIV class="foo bar">&lt;/DIV>
#jQuery tutorial tweet 16 ~ Determine if an HTML element has a CSS class: $("div#id").hasClass("blue") ~ returns true or false.
#jQuery tutorial tweet 15 ~ Dynamically add/remove CSS to/from an element by calling .addClass("classname"); and .removeClass("classname");
#jQuery tutorial tweet 14 ~ You can trigger events that are already bound to an HTML element by using the method: $("div").trigger("click");
#jQuery tutorial tweet 13 ~ A self-removing event that removes itself after the event executes can be created using the .one() function.
#jQuery tutorial tweet 12 ~ Input elements: .blur(function(){...}) is a shortcut to .bind('blur', function(){...})
#jQuery tutorial tweet 12 ~ Using self-reference "this" inside callback to hide target on onclick: $('p').click(function(){$(this).hide()});
#jQuery tutorial tweet 11 ~ $("DIV").hide() will hide all DIVs immediately. But $("DIV").hide("slow") will run a weird slide/fade animation.
My jQuery tutorial book http://www.learnjquery.org  is a tutorial vinaigrette with web development insights on the side #jquery
#jQuery tutorial tweet 10 ~ appendTo() does exactly the same thing as append(), except the selector and functions' arguments are reversed.
#jQuery tutorial tweet 9 ~ To "cut and paste" all &lt;P> tags on the page and move them into #container, use ~ $("P").appendTo("#container");
#jQuery tutorial tweet 8 ~ Get HTML inside of an element whose id is "clock" and store as text string ~ var content = $("#clock").html();
#jQuery tutorial tweet 7 ~ Use .wrap() to "surround" HTML elements with other elements ~ $('P').wrap('&lt;DIV />'); wraps all Ps with 2 DIVs.
#jQuery tutorial tweet 6 ~ $('div').prepend('Before').append('After'); on "&lt;div>1&lt;/div>" will produce "&lt;div>Before1After&lt;/div>"
#jQuery tutorial tweet 5 ~ Latest version recommends that we start using .on() and .off() instead of .bind(), .unbind(), .click(), etc.
#jQuery tutorial tweet 4 ~ A nameless "callback function" is most often the last argument. It's executed when the statement is finished.
#jQuery tutorial tweet 3 ~ The .attr("var"); method can refer to a custom attribute invented by yourself. For example: &lt;div var="xyz">
#jQuery tutorial tweet 2 ~ You can stack up ":not" selectors using space as in ~ $("* :not('ul') :not('body')").css("background","red");
#jQuery tutorial tweet 1 ~ Little known CSS selector is ":not", it helps to select "everything but xyz." Example $("* :not('xyz')").hide();